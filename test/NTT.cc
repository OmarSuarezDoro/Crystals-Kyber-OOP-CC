/**
 * Universidad de La Laguna
 * Escuela Superior de Ingeniería y Tecnología
 * Grado en Ingeniería Informática
 * Trabajo de Fin de Grado - Kleptographic Attacks on Lattice-Based CryptoSystems
 *
 * @author Omar Suárez Doro
 * @date July 18 2024
 * @version v0.1.0
 * @brief This file contains the tests for the NTT class
 */

#include <gtest/gtest.h>
#include "../src/Components/NTT.h"
#include "../src/DataStructures/Polynomial.h"

class NTTTest : public ::testing::Test {
 public:
  NTT ntt_ = NTT(128, 3329);
  NTT ntt2_ = NTT(256, 3329);
  Polynomial<int> test_polynomial1 = Polynomial<int>(128);
  Polynomial<int> test_polynomial2 = Polynomial<int>(128);
  Polynomial<int> test_polynomial3 = Polynomial<int>(128);
  Polynomial<int> test_intt_polynomial1 = Polynomial<int>(128);
  Polynomial<int> test_intt_polynomial2 = Polynomial<int>(128);
  Polynomial<int> test_intt_polynomial3 = Polynomial<int>(128);
  Polynomial<int> test_kyber_polynomial1 = Polynomial<int>(256);
  Polynomial<int> test_kyber_polynomial2 = Polynomial<int>(256);
  Polynomial<int> test_kyber_polynomial3 = Polynomial<int>(256);

 protected:
  virtual void SetUp() {
    // Set up the test cases
    test_polynomial1.SetCoefficients({1, 1, 0, 0, 0, -1, -1, 0, 1, 0, -1, 1, 0, 0, 0, 2, -2, 0, -1, 1, 0, 
    -2, -1, 0, 0, 0, -1, 0, 0, -2, 0, 0, -1, 0, 0, 0, -1, 1, -1, -2, 1, 0, -1, 0, 1, 2, 0, -1, 
    1, -1, 2, 0, 1, 0, 0, 1, 1, 1, 0, 1, -2, 1, 0, -1, 1, -1, -1, 1, -2, -2, 0, 2, 1, -2, 0, 0, 
    1, 1, 0, 2, -2, 0, -2, 2, -1, 1, -1, -3, 0, 0, -1, 3, 1, 0, 1, 1, -2, -1, -2, -3, 0, -1, 0, 
    -1, -1, 1, 1, -1, -1, -2, 0, -1, 1, 0, 0, -1, 0, 0, -1, 1, 1, 0, 1, 1, -1, -2, 1, 1});
    test_polynomial2.SetCoefficients({-1, -1, 1, 0, 1, 1, 0, -2, 0, 0, 2, 1, 1, 2, -1, -1, 1, -1,
    0, -1, 1, 1, 0, 1, 0, -1, 0, -2, -1, 1, 1, 0, -2, -2, 2, 1, 1, 1, 1, 0, 3, 1, -3, -3, 0, 1, 
    -1, -1, -2, -2, 1, -1, 0, 1, -1, 0, 3, -2, 0, 1, 0, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 0, 1,
    2, 1, 1, 1, -1, 0, -1, 0, -1, 3, 0, -2, 2, 2, -2, 2, -1, 0, -1, 0, 1, 2, 1, -1, -1, 1, -1, 0, 
    2, 1, -3, 2, 1, -2, 1, 0, 2, 0, 2, 0, 0, 0, -1, -1, 1, -3, -1, -1, 1, 0, 0, 2, -2, 1, 0});
    test_polynomial3.SetCoefficients({2, -1, -2, 3, -1, 1, -1, 1, 0, 0, 0, 3, 0, 0, 1, 0, 1, 1, 0, -1, 1, 0, 
    -1, -1, 2, 1, 1, 2, 0, -1, -2, 0, 0, -1, -3, -2, 0, 2, 1, 1, -1, 0, -1, 3, 0, 0, 0, -1, 0, 1, 0, 0, 0, -1, 
    -1, 0, -3, 0, 0, 0, 0, -1, 0, -1, -2, -2, 2, 1, 1, 2, 1, 0, 1, -1, 0, 1, -1, 0, -1, -1, 0, -1, 0, -3, -3, 
    -1, 0, -1, 1, -1, 2, 1, 0, 0, 1, 1, 1, 0, 0, -1, 2, -1, 1, 2, 0, 1, 1, -1, 1, 2, -1, 0, -1, -2, -2, -1, 0, 
    2, 0, 1, 1, 0, 1, 3, 1, -1, 0, 0});

    test_intt_polynomial1.SetCoefficients({733, 1883, 2580, 1261, 3075, 1244, 1671, 2183, 424, 2371, 390, 2712, 2941,
    3049, 1698, 2260, 1665, 3237, 1031, 497, 161, 2268, 2604, 3065, 565, 1391, 2987, 136, 240, 2417, 749, 729, 2727,
    2073, 2646, 3012, 1431, 974, 1792, 865, 3172, 614, 1054, 1929, 2496, 581, 1270, 3007, 205, 1255, 717, 3131, 848,
    132, 2599, 1601, 2728, 1962, 225, 2309, 1872, 310, 1907, 1989, 989, 2140, 1420, 2752, 1112, 705, 1556, 2947, 1401,
    2620, 458, 1032, 149, 627, 2634, 2818, 1276, 2905, 639, 869, 2242, 183, 3154, 3296, 2853, 2222, 2392, 1924, 3009, 
    425, 2676, 1351, 1869, 2540, 666, 2911, 1135, 631, 539, 2010, 3112, 2102, 3284, 1901, 2074, 3121, 2392, 2845, 316, 
    1277, 326, 1437, 220, 39, 1595, 2072, 1621, 2748, 2020, 2879, 3272, 2265, 2857, 1990});

    test_intt_polynomial2.SetCoefficients({1986, 609, 2821, 1076, 2843, 2655, 1438, 1213, 2274, 1238, 109, 673, 3151,
    707, 2088, 1904, 2625, 889, 1275, 21, 1811, 282, 742, 637, 1273, 1614, 1865, 476, 146, 17, 1686, 276, 2562, 1400,
    2366, 1651, 1574, 3328, 3120, 925, 651, 972, 1841, 1107, 1370, 369, 1688, 1290, 1885, 2146, 1166, 2513, 233, 1413,
    2888, 2282, 855, 506, 1547, 2955, 3228, 573, 1809, 3230, 1138, 636, 2498, 2290, 3135, 3153, 1807, 961, 2765, 3055,
    2641, 2248, 2943, 1570, 1081, 483, 2909, 1343, 3213, 3169, 716, 296, 2196, 589, 1440, 1503, 807, 1484, 1664, 2254,
    1612, 3159, 2279, 325, 1246, 1197, 1286, 374, 2265, 2046, 1658, 3081, 2756, 211, 2179, 644, 1862, 1968, 656, 653,
    2366, 340, 599, 2875, 2037, 1393, 3209, 2990, 1096, 1471, 1397, 964, 1433, 3177});
    
    test_intt_polynomial3.SetCoefficients({3304, 867, 3138, 704, 1698, 2967, 2986, 505, 1665, 195, 3142, 1170, 925, 1726,
    274, 2075, 1030, 370, 3133, 1777, 238, 2441, 2181, 433, 1423, 2776, 512, 1284, 2672, 1722, 267, 1879, 1072, 2139, 1476,
    1174, 2181, 2464, 50, 1803, 2858, 3160, 2501, 3239, 2307, 2348, 3236, 1801, 1997, 1908, 2263, 1729, 3134, 1312, 637, 2673, 
    1751, 2266, 341, 1671, 2265, 2011, 1832, 1842, 3062, 296, 126, 234, 574, 2030, 92, 991, 1919, 2808, 1849, 2090, 2249, 3133, 
    58, 1967, 3266, 2698, 1046, 3014, 1745, 2089, 489, 2817, 3101, 1982, 440, 408, 1620, 363, 617, 2363, 2292, 1103, 3020, 1039, 
    3198, 2166, 3029, 1099, 2084, 2426, 2761, 1366, 2689, 2621, 1993, 2690, 1796, 917, 1807, 1693, 495, 206, 2683, 1104, 1813, 1827, 
    1582, 2570, 3109, 2040, 1551, 201});

    test_kyber_polynomial1.SetCoefficients({1, -1, 0, 1, 0, -1, 0, 0, -1, 0, 1, 1, 2, 1, 0, 0, -2, 1, -2, 3, 0, 0, -2, 0, 0, -1, 0, 
    -1, -1, 0, -1, 0, 1, -1, 0, 0, 0, 1, -1, 2, 0, -1, -1, -2, 0, 0, 2, 2, -1, -2, 1, -2, 1, 1, 0, -1, 1, -1, 0, 1, -1, 1, 0, -1, 0,
     1, -1, -1, 1, -2, -2, 1, 0, 1, -1, 1, 1, 0, 1, -1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 2, 0, 1, -1, 2, 2, 1, 0, -1, 0, -2, -2, 2,
      -1, 1, 0, -2, -1, 1, -1, 0, 0, -1, 2, -1, -2, -1, -3, -2, 0, 1, 1, -1, -1, -2, 2, 0, 0, 1, 2, -2, 0, 2, 0, 1, -1, 2, 2, 1, 0, 
      0, 0, 1, -2, -1, 1, -1, -1, -2, 0, -2, 0, 0, -2, 0, -1, 1, -1, -1, -1, -1, 1, 3, 2, 2, 1, 0, 1, 0, 0, 1, -1, 2, 3, 1, 2, 0, 
      -1, 2, 0, -1, -1, 1, 0, 2, -1, 1, -2, -1, -1, 1, 1, 1, 1, 2, 2, -2, 1, -3, 2, 0, 1, 0, -1, 0, 0, -1, 0, -2, 0, 0, 0, 0, -2, 2,
       2, 1, 1, 0, 2, 0, -1, 0, 2, -1, 1, 0, 0, 3, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 1, 1, -1, 0, -2, -1, 0, 0, -2, 1, 1, -2, 1, 1});

  }
  virtual void TearDown() {
    // Clean up the test cases
  }
};

/**
 * @brief Test for NTT
 * 
 */
TEST_F(NTTTest, NTTTEST0) {
  Polynomial<int> result = ntt_._NTT(test_polynomial1);
  std::vector<int> expected_values = {1139, 1156, 67, 3323, 3208, 1870, 416, 3121, 1746, 3191, 1485, 755, 494, 690, 1278, 2827, 950, 1098, 1201, 2788, 1761, 424, 2971, 1754, 2424, 2703, 2724, 2554, 1384, 1871, 510, 1373, 713, 1733, 1942, 2134, 1881, 783, 1217, 3249, 3310, 141, 1380, 51, 1033, 846, 691, 1242, 1206, 2590, 2335, 3086, 927, 1595, 2145, 188, 1869, 1113, 539, 2184, 2870, 768, 2581, 464, 1856, 736, 1574, 681, 937, 2096, 1719, 3076, 1978, 2858, 2671, 1352, 264, 2884, 1750, 1309, 2304, 915, 1596, 830, 991, 1303, 2805, 1791, 2833, 649, 2588, 1257, 2454, 1920, 1192, 673, 2877, 1339, 2614, 442, 1483, 1494, 2255, 2748, 2172, 2902, 1377, 1157, 2179, 1213, 2188, 331, 664, 2765, 2056, 2394, 731, 3025, 2066, 772, 426, 1086, 2200, 2778, 2144, 1555, 2941, 2235};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for NTT
 * 
 */
TEST_F(NTTTest, NTTTEST1) {
  Polynomial<int> result = ntt_._NTT(test_polynomial2);
  std::vector<int> expected_values = {2456, 470, 2557, 2506, 1018, 3122, 397, 2416, 858, 2701, 2109, 3231, 607, 2298, 
  2060, 1689, 1027, 258, 2167, 73, 1624, 616, 2593, 2689, 573, 439, 2173, 1619, 2181, 1471, 874, 376, 3181, 2348, 1673, 
  981, 1567, 3280, 2500, 274, 2025, 1576, 2532, 282, 23, 3107, 372, 1219, 3100, 3294, 1006, 748, 2059, 1561, 1520, 1615, 
  1849, 3027, 731, 1415, 88, 371, 1327, 2035, 1786, 1938, 195, 1760, 1396, 1363, 154, 2651, 1291, 1399, 1394, 2402, 2062, 
  1454, 2240, 428, 947, 685, 2830, 807, 3216, 1458, 2065, 48, 2104, 428, 600, 185, 1599, 196, 896, 2429, 27, 117, 1434, 
  345, 718, 1340, 1483, 9, 1559, 1389, 448, 2792, 3016, 2172, 1403, 792, 1377, 1124, 3038, 2452, 135, 2144, 499, 253, 1318, 
  913, 1432, 1988, 230, 1180, 751, 78};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for NTT
 * 
 */
TEST_F(NTTTest, NTTTEST3) {
  Polynomial<int> result = ntt_._NTT(test_polynomial3);
  std::vector<int> expected_values = {765, 1130, 2610, 2855, 439, 3253, 2149, 1366, 618, 3261, 2892, 76, 139, 2074, 1118, 
  1287, 1977, 2511, 2021, 328, 686, 2071, 2461, 601, 1877, 1744, 877, 2648, 1146, 1490, 560, 2219, 3023, 666, 2852, 713, 
  2370, 339, 3019, 488, 3194, 521, 2097, 520, 2616, 2631, 3159, 63, 2212, 2000, 519, 2596, 1297, 3192, 303, 1024, 1663, 
  3152, 393, 2019, 2163, 2063, 1128, 3143, 1102, 1240, 629, 387, 1293, 1508, 1370, 1165, 586, 2550, 156, 3046, 2664, 3182, 
  3317, 2834, 2304, 1001, 2103, 1193, 526, 1629, 2956, 749, 1805, 868, 2629, 1964, 2018, 978, 1467, 2243, 2122, 507, 3125, 
  1756, 3244, 613, 746, 1763, 2228, 262, 1831, 1576, 230, 2585, 1839, 897, 3110, 1212, 1912, 2574, 1447, 2989, 2679, 625, 
  697, 1624, 2688, 1433, 1140, 2693, 2179, 466};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for INTT
 * 
 */
TEST_F(NTTTest, INTTTEST0) {
  Polynomial<int> result = ntt_._INTT(test_intt_polynomial1);
  std::vector<int> expected_values = {2274, 1956, 1086, 584, 119, 3226, 861, 2173, 1907, 3226, 2746, 3287, 2086, 3084, 3218, 
  402, 670, 2131, 2434, 3292, 620, 2234, 2331, 3007, 881, 695, 3140, 1055, 148, 3321, 1367, 108, 3100, 2037, 1667, 1806, 2067,
  611, 468, 2925, 1048, 1536, 1865, 2841, 874, 726, 2842, 2509, 1311, 2988, 1844, 856, 819, 1045, 1337, 3168, 736, 1766, 1818,
  766, 3270, 315, 46, 590, 1615, 1959, 1021, 1303, 1188, 1374, 2963, 2939, 1751, 552, 545, 1811, 2883, 757, 3130, 557, 1353, 
  1290, 1071, 945, 3279, 724, 71, 342, 1127, 1114, 508, 2972, 2446, 2824, 2737, 791, 1895, 1599, 457, 2345, 2030, 1919, 1081,
  426, 3042, 521, 2551, 1202, 1309, 1344, 3282, 2983, 753, 1409, 523, 2630, 1705, 3189, 2123, 2486, 37, 1428, 1574, 234, 314,
  3060, 3013, 1678};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for INTT
 * 
 */
TEST_F(NTTTest, INTTTEST1) {
  Polynomial<int> result = ntt_._INTT(test_intt_polynomial2);
  std::vector<int> expected_values = {2530, 1387, 2041, 2485, 890, 1451, 2307, 1808, 1642, 3017, 1349, 1579, 2907, 1938, 1737,
  2926, 3054, 586, 1235, 1904, 888, 2622, 863, 118, 1457, 1600, 2840, 146, 2136, 3009, 663, 514, 3058, 2961, 3259, 69, 3306, 632,
  1772, 1897, 189, 1914, 2025, 2557, 1789, 2443, 3125, 1126, 1784, 1908, 3227, 2763, 697, 2043, 2449, 1774, 1674, 2644, 237, 1643,
  2123, 148, 2382, 3279, 3153, 916, 2811, 759, 2370, 2691, 474, 677, 1356, 1011, 471, 371, 99, 162, 3164, 258, 2042, 788, 3278, 2244,
  1342, 2693, 3141, 3324, 2960, 1299, 2325, 2313, 1891, 1, 1244, 2248, 878, 116, 1235, 177, 775, 363, 2974, 1283, 2479, 2070, 3318, 66,
  332, 2811, 2248, 825, 820, 1133, 2103, 408, 597, 589, 1566, 2491, 1937, 1788, 784, 1536, 1635, 413, 1191, 1623};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for INTT
 * 
 */
TEST_F(NTTTest, INTTTEST3) {
  Polynomial<int> result = ntt_._INTT(test_intt_polynomial3);
  std::vector<int> expected_values = {2557, 2660, 338, 853, 2476, 767, 3235, 2787, 2914, 2825, 1555, 2001, 1272, 2927, 3115, 721, 2155, 
  1483, 1368, 2059, 442, 2114, 1891, 1341, 2149, 2413, 670, 442, 2023, 813, 2044, 2452, 200, 3229, 313, 624, 2680, 1540, 1924, 1109, 465, 
  2032, 2502, 1737, 2489, 700, 2016, 996, 1718, 96, 2184, 3146, 523, 3070, 49, 3088, 2215, 2682, 616, 1890, 3223, 2896, 2904, 1142, 214, 706, 
  562, 700, 569, 2063, 2843, 819, 1921, 2505, 1045, 2972, 2913, 744, 1789, 2870, 106, 1567, 3190, 517, 2913, 281, 1840, 1058, 1752, 2237, 626, 
  3290, 995, 126, 921, 947, 2010, 109, 2145, 2876, 2730, 687, 2082, 1428, 1349, 1172, 3136, 71, 1380, 470, 2798, 2567, 1345, 979, 479, 332, 55, 
  2572, 1952, 843, 2967, 1035, 270, 1147, 2226, 433, 756, 879};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for Kyber NTT
 * 
 */
TEST_F(NTTTest, KYBERNTTTEST0) {
  Polynomial<int> result = ntt2_.NTT_Kyber(test_kyber_polynomial1, true);
  std::vector<int> expected_values = {2199, 2016, 1542, 561, 52, 791, 2064, 1498, 3191, 1758, 2265, 1988, 1977, 1626, 1958, 637, 1410, 2234, 796, 
  1762, 2540, 1971, 698, 1680, 2286, 145, 925, 1070, 1450, 2538, 843, 458, 2190, 1040, 2397, 3124, 2810, 1917, 831, 3246, 2110, 2986, 2868, 2642, 
  1239, 352, 2145, 3183, 1878, 2751, 2479, 3079, 3033, 2197, 2673, 659, 1929, 63, 856, 1314, 1825, 779, 1215, 1286, 2299, 2548, 2555, 456, 1189, 
  1076, 1946, 1632, 454, 2934, 484, 3197, 459, 1595, 1648, 2024, 1268, 2195, 2794, 70, 1581, 2911, 3298, 944, 2200, 1017, 2285, 1997, 2462, 1048, 
  3061, 2900, 1228, 2032, 1565, 510, 1243, 3240, 2005, 2217, 1861, 2084, 41, 1504, 1602, 2949, 1491, 2327, 321, 593, 416, 2987, 477, 556, 2014, 
  2634, 2886, 163, 1263, 3109, 3047, 3004, 3133, 2117, 3020, 2205, 1884, 739, 561, 1937, 1392, 1841, 1627, 3061, 265, 1637, 1902, 2327, 2331, 
  1559, 316, 2269, 1931, 2590, 1879, 3156, 2177, 236, 882, 1231, 2689, 2259, 2161, 1966, 2473, 1365, 1900, 2774, 468, 1508, 2474, 2077, 194, 
  2428, 2146, 2133, 68, 352, 2033, 629, 2176, 1609, 1773, 1441, 2168, 679, 3155, 169, 3028, 16, 174, 689, 3307, 2509, 807, 841, 2599, 2320, 
  197, 701, 3238, 3035, 839, 1288, 3309, 3042, 1969, 1413, 1082, 838, 2020, 16, 525, 3044, 497, 2647, 523, 1322, 806, 1736, 2657, 454, 3036, 205, 
  398, 343, 29, 1056, 2228, 878, 1080, 1742, 93, 479, 217, 1129, 2415, 3159, 1081, 1633, 925, 825, 3126, 637, 2658, 937, 425, 2050, 2072, 930, 2987,
  3146, 2246, 44, 232, 2528, 1120, 56, 1817, 800, 1456, 1013};
  Polynomial<int> expected_polynomial = Polynomial<int>(256);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}
