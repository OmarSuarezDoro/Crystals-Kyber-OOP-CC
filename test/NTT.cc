/**
 * Universidad de La Laguna
 * Escuela Superior de Ingeniería y Tecnología
 * Grado en Ingeniería Informática
 * Trabajo de Fin de Grado - Kleptographic Attacks on Lattice-Based CryptoSystems
 *
 * @author Omar Suárez Doro
 * @date July 18 2024
 * @version v0.1.0
 * @brief This file contains the tests for the NTT class
 */

#include <gtest/gtest.h>
#include "../src/Components/NTT.h"
#include "../src/DataStructures/Polynomial.h"
#include "../src/DataStructures/Bytes.h"

class NTTTest : public ::testing::Test {
 public:
  NTT ntt_ = NTT(128, 3329);
  NTT ntt2_ = NTT(256, 3329);
  Polynomial<int> test_polynomial1 = Polynomial<int>(128);
  Polynomial<int> test_polynomial2 = Polynomial<int>(128);
  Polynomial<int> test_polynomial3 = Polynomial<int>(128);
  Bytes test_bytes1;

  Polynomial<int> test_intt_polynomial1 = Polynomial<int>(128);
  Polynomial<int> test_intt_polynomial2 = Polynomial<int>(128);
  Polynomial<int> test_intt_polynomial3 = Polynomial<int>(128);
  Polynomial<int> test_kyber_polynomial1 = Polynomial<int>(256);
  Polynomial<int> test_kyber_polynomial2 = Polynomial<int>(256);
  Polynomial<int> test_kyber_polynomial3 = Polynomial<int>(256);

 protected:
  virtual void SetUp() {
    // Set up the test cases
    test_polynomial1.SetCoefficients({1, 1, 0, 0, 0, -1, -1, 0, 1, 0, -1, 1, 0, 0, 0, 2, -2, 0, -1, 1, 0, 
    -2, -1, 0, 0, 0, -1, 0, 0, -2, 0, 0, -1, 0, 0, 0, -1, 1, -1, -2, 1, 0, -1, 0, 1, 2, 0, -1, 
    1, -1, 2, 0, 1, 0, 0, 1, 1, 1, 0, 1, -2, 1, 0, -1, 1, -1, -1, 1, -2, -2, 0, 2, 1, -2, 0, 0, 
    1, 1, 0, 2, -2, 0, -2, 2, -1, 1, -1, -3, 0, 0, -1, 3, 1, 0, 1, 1, -2, -1, -2, -3, 0, -1, 0, 
    -1, -1, 1, 1, -1, -1, -2, 0, -1, 1, 0, 0, -1, 0, 0, -1, 1, 1, 0, 1, 1, -1, -2, 1, 1});
    test_polynomial2.SetCoefficients({-1, -1, 1, 0, 1, 1, 0, -2, 0, 0, 2, 1, 1, 2, -1, -1, 1, -1,
    0, -1, 1, 1, 0, 1, 0, -1, 0, -2, -1, 1, 1, 0, -2, -2, 2, 1, 1, 1, 1, 0, 3, 1, -3, -3, 0, 1, 
    -1, -1, -2, -2, 1, -1, 0, 1, -1, 0, 3, -2, 0, 1, 0, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 0, 1,
    2, 1, 1, 1, -1, 0, -1, 0, -1, 3, 0, -2, 2, 2, -2, 2, -1, 0, -1, 0, 1, 2, 1, -1, -1, 1, -1, 0, 
    2, 1, -3, 2, 1, -2, 1, 0, 2, 0, 2, 0, 0, 0, -1, -1, 1, -3, -1, -1, 1, 0, 0, 2, -2, 1, 0});
    test_polynomial3.SetCoefficients({2, -1, -2, 3, -1, 1, -1, 1, 0, 0, 0, 3, 0, 0, 1, 0, 1, 1, 0, -1, 1, 0, 
    -1, -1, 2, 1, 1, 2, 0, -1, -2, 0, 0, -1, -3, -2, 0, 2, 1, 1, -1, 0, -1, 3, 0, 0, 0, -1, 0, 1, 0, 0, 0, -1, 
    -1, 0, -3, 0, 0, 0, 0, -1, 0, -1, -2, -2, 2, 1, 1, 2, 1, 0, 1, -1, 0, 1, -1, 0, -1, -1, 0, -1, 0, -3, -3, 
    -1, 0, -1, 1, -1, 2, 1, 0, 0, 1, 1, 1, 0, 0, -1, 2, -1, 1, 2, 0, 1, 1, -1, 1, 2, -1, 0, -1, -2, -2, -1, 0, 
    2, 0, 1, 1, 0, 1, 3, 1, -1, 0, 0});

    test_intt_polynomial1.SetCoefficients({733, 1883, 2580, 1261, 3075, 1244, 1671, 2183, 424, 2371, 390, 2712, 2941,
    3049, 1698, 2260, 1665, 3237, 1031, 497, 161, 2268, 2604, 3065, 565, 1391, 2987, 136, 240, 2417, 749, 729, 2727,
    2073, 2646, 3012, 1431, 974, 1792, 865, 3172, 614, 1054, 1929, 2496, 581, 1270, 3007, 205, 1255, 717, 3131, 848,
    132, 2599, 1601, 2728, 1962, 225, 2309, 1872, 310, 1907, 1989, 989, 2140, 1420, 2752, 1112, 705, 1556, 2947, 1401,
    2620, 458, 1032, 149, 627, 2634, 2818, 1276, 2905, 639, 869, 2242, 183, 3154, 3296, 2853, 2222, 2392, 1924, 3009, 
    425, 2676, 1351, 1869, 2540, 666, 2911, 1135, 631, 539, 2010, 3112, 2102, 3284, 1901, 2074, 3121, 2392, 2845, 316, 
    1277, 326, 1437, 220, 39, 1595, 2072, 1621, 2748, 2020, 2879, 3272, 2265, 2857, 1990});

    test_intt_polynomial2.SetCoefficients({1986, 609, 2821, 1076, 2843, 2655, 1438, 1213, 2274, 1238, 109, 673, 3151,
    707, 2088, 1904, 2625, 889, 1275, 21, 1811, 282, 742, 637, 1273, 1614, 1865, 476, 146, 17, 1686, 276, 2562, 1400,
    2366, 1651, 1574, 3328, 3120, 925, 651, 972, 1841, 1107, 1370, 369, 1688, 1290, 1885, 2146, 1166, 2513, 233, 1413,
    2888, 2282, 855, 506, 1547, 2955, 3228, 573, 1809, 3230, 1138, 636, 2498, 2290, 3135, 3153, 1807, 961, 2765, 3055,
    2641, 2248, 2943, 1570, 1081, 483, 2909, 1343, 3213, 3169, 716, 296, 2196, 589, 1440, 1503, 807, 1484, 1664, 2254,
    1612, 3159, 2279, 325, 1246, 1197, 1286, 374, 2265, 2046, 1658, 3081, 2756, 211, 2179, 644, 1862, 1968, 656, 653,
    2366, 340, 599, 2875, 2037, 1393, 3209, 2990, 1096, 1471, 1397, 964, 1433, 3177});
    
    test_intt_polynomial3.SetCoefficients({3304, 867, 3138, 704, 1698, 2967, 2986, 505, 1665, 195, 3142, 1170, 925, 1726,
    274, 2075, 1030, 370, 3133, 1777, 238, 2441, 2181, 433, 1423, 2776, 512, 1284, 2672, 1722, 267, 1879, 1072, 2139, 1476,
    1174, 2181, 2464, 50, 1803, 2858, 3160, 2501, 3239, 2307, 2348, 3236, 1801, 1997, 1908, 2263, 1729, 3134, 1312, 637, 2673, 
    1751, 2266, 341, 1671, 2265, 2011, 1832, 1842, 3062, 296, 126, 234, 574, 2030, 92, 991, 1919, 2808, 1849, 2090, 2249, 3133, 
    58, 1967, 3266, 2698, 1046, 3014, 1745, 2089, 489, 2817, 3101, 1982, 440, 408, 1620, 363, 617, 2363, 2292, 1103, 3020, 1039, 
    3198, 2166, 3029, 1099, 2084, 2426, 2761, 1366, 2689, 2621, 1993, 2690, 1796, 917, 1807, 1693, 495, 206, 2683, 1104, 1813, 1827, 
    1582, 2570, 3109, 2040, 1551, 201});

    test_kyber_polynomial1.SetCoefficients({1, -1, 0, 1, 0, -1, 0, 0, -1, 0, 1, 1, 2, 1, 0, 0, -2, 1, -2, 3, 0, 0, -2, 0, 0, -1, 0, 
    -1, -1, 0, -1, 0, 1, -1, 0, 0, 0, 1, -1, 2, 0, -1, -1, -2, 0, 0, 2, 2, -1, -2, 1, -2, 1, 1, 0, -1, 1, -1, 0, 1, -1, 1, 0, -1, 0,
     1, -1, -1, 1, -2, -2, 1, 0, 1, -1, 1, 1, 0, 1, -1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 2, 0, 1, -1, 2, 2, 1, 0, -1, 0, -2, -2, 2,
      -1, 1, 0, -2, -1, 1, -1, 0, 0, -1, 2, -1, -2, -1, -3, -2, 0, 1, 1, -1, -1, -2, 2, 0, 0, 1, 2, -2, 0, 2, 0, 1, -1, 2, 2, 1, 0, 
      0, 0, 1, -2, -1, 1, -1, -1, -2, 0, -2, 0, 0, -2, 0, -1, 1, -1, -1, -1, -1, 1, 3, 2, 2, 1, 0, 1, 0, 0, 1, -1, 2, 3, 1, 2, 0, 
      -1, 2, 0, -1, -1, 1, 0, 2, -1, 1, -2, -1, -1, 1, 1, 1, 1, 2, 2, -2, 1, -3, 2, 0, 1, 0, -1, 0, 0, -1, 0, -2, 0, 0, 0, 0, -2, 2,
       2, 1, 1, 0, 2, 0, -1, 0, 2, -1, 1, 0, 0, 3, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 1, 1, -1, 0, -2, -1, 0, 0, -2, 1, 1, -2, 1, 1});

    test_bytes1 = Bytes(std::vector<int>{221, 72, 149, 124, 83, 43, 30, 125, 86, 22, 162, 236, 124, 129, 157, 151, 207, 211, 180, 62, 170, 180,
    179, 103, 93, 115, 219, 163, 56, 98, 197, 60, 253, 198, 195, 8, 5, 244, 251, 32, 161, 178, 79, 55, 9, 94, 109, 202, 220, 125, 104, 82, 71,
    168, 21, 187, 48, 83, 93, 55, 90, 112, 236, 109, 77, 145, 109, 45, 39, 52, 110, 204, 177, 5, 55, 193, 49, 135, 73, 87, 67, 64, 153, 166, 131,
    114, 101, 6, 69, 9, 222, 88, 130, 8, 75, 29, 132, 221, 102, 77, 120, 213, 208, 24, 101, 155, 221, 196, 156, 153, 154, 112, 17, 238, 66, 116, 3,
    250, 28, 227, 143, 130, 11, 222, 238, 159, 200, 142, 158, 167, 195, 158, 75, 224, 83, 14, 21, 10, 51, 167, 121, 160, 45, 190, 245, 94, 6, 196, 95,
    239, 204, 152, 183, 246, 21, 117, 194, 44, 251, 218, 146, 56, 121, 238, 154, 217, 145, 51, 204, 206, 59, 216, 208, 63, 253, 243, 97, 252, 204, 6,
    216, 68, 37, 183, 52, 219, 106, 64, 222, 225, 20, 142, 26, 207, 15, 122, 1, 38, 41, 86, 108, 136, 130, 248, 23, 13, 111, 50, 64, 169, 224, 0, 113,
    28, 168, 183, 240, 207, 245, 76, 79, 27, 159, 189, 147, 187, 133, 93, 10, 204, 253, 184, 120, 125, 170, 58, 157, 168, 137, 15, 7, 128, 222, 45, 35,
    91, 153, 90, 232, 166, 201, 117, 116, 177, 77, 167, 255, 50, 201, 249, 12, 219, 110, 190, 246, 7, 201, 40, 193, 114, 73, 172, 4, 241, 188, 21, 229,
    63, 126, 16, 64, 254, 106, 194, 126, 138, 204, 219, 109, 71, 176, 141, 217, 64, 78, 107, 10, 199, 38, 42, 241, 175, 59, 122, 12, 2, 40, 82, 174, 154,
    120, 111, 14, 85, 115, 238, 83, 200, 29, 15, 101, 49, 228, 50, 53, 39, 26, 141, 113, 101, 108, 94, 216, 38, 231, 93, 213, 222, 51, 213, 164, 54, 152,
    250, 88, 58, 52, 189, 92, 231, 73, 234, 246, 4, 150, 134, 44, 94, 127, 131, 227, 123, 124, 254, 226, 219, 62, 80, 164, 88, 2, 230, 131, 201, 76, 72,
    180, 235, 10, 140, 116, 107, 73, 56, 87, 211, 12, 222, 218, 190, 174, 48, 237, 57, 230, 90, 100, 112, 163, 120, 232, 56, 4, 185, 112, 233, 176, 60,
    102, 36, 216, 185, 137, 247, 8, 30, 214, 65, 20, 47, 22, 102, 40, 239, 111, 222, 71, 16, 208, 69, 202, 36, 24, 27, 237, 54, 48, 40, 138, 24, 65, 192,
    59, 119, 81, 89, 13, 61, 97, 145, 191, 109, 25, 148, 5, 53, 211, 248, 27, 239, 132, 15, 168, 146, 54, 185, 34, 54, 226, 247, 202, 167, 198, 98, 54, 26,
    134, 34, 211, 163, 33, 71, 190, 188, 252, 160, 22, 188, 181, 168, 181, 181, 145, 88, 145, 215, 160, 134, 128, 99, 221, 188, 30, 102, 154, 8, 61, 218, 174,
    25, 174, 15, 225, 140, 150, 146, 186, 221, 154, 53, 178, 145, 7, 55, 95, 228, 71, 98, 71, 42, 129, 33, 161, 251, 143, 97, 216, 176, 42, 227, 88, 254, 114,
    223, 147, 4, 249, 208, 211, 129, 55, 169, 220, 116, 245, 252, 112, 6, 90, 1, 145, 123, 116, 197, 11, 139, 7, 158, 24, 60, 159, 73, 74, 191, 4, 46, 228, 232,
    151, 88, 194, 208, 65, 85, 200, 36, 154, 13, 183, 57, 169, 9, 31, 11, 184, 56, 215, 212, 237, 47, 254, 23, 120, 15, 188, 27, 159, 49, 9, 216, 239, 134, 195,
    157, 246, 102, 168, 160, 108, 218, 155, 93, 88, 96, 148, 58, 98, 243, 34, 160, 218, 65, 11, 167, 5, 46, 21, 245, 240, 5, 113, 118, 217, 147, 227, 74, 255,
    25, 69, 61, 211, 218, 100, 55, 131, 224, 29, 209, 74, 33, 50, 97, 60, 77, 214, 160, 95, 138, 32, 171, 109, 251, 57, 20, 40, 15, 119, 44, 130, 221, 16, 145,
    141, 121, 171, 62, 101, 102, 236, 61, 255, 176, 200, 232, 195, 65, 194, 24, 8, 251, 39, 76, 230, 182, 245, 122, 212, 17, 104, 105, 142, 164, 121, 89, 107, 95,
    152, 104, 112, 236, 120, 126, 0, 52, 160, 225, 138, 176, 72, 13, 240, 87, 156, 28, 69, 10, 35, 53, 163, 78, 5, 132, 100, 9, 141, 105, 19, 98, 219, 143, 0, 22,
    24, 25, 253, 237, 205, 233, 21, 27, 199, 182, 50, 182, 63, 132, 72, 75});
  }
  virtual void TearDown() {
    // Clean up the test cases
  }
};

/**
 * @brief Test for NTT
 * 
 */
TEST_F(NTTTest, NTTTEST0) {
  Polynomial<int> result = ntt_.NTT_(test_polynomial1);
  std::vector<int> expected_values = {1139, 1156, 67, 3323, 3208, 1870, 416, 3121, 1746, 3191, 1485, 755, 494, 690, 1278, 2827, 950, 1098, 1201, 2788, 1761, 424, 2971, 1754, 2424, 2703, 2724, 2554, 1384, 1871, 510, 1373, 713, 1733, 1942, 2134, 1881, 783, 1217, 3249, 3310, 141, 1380, 51, 1033, 846, 691, 1242, 1206, 2590, 2335, 3086, 927, 1595, 2145, 188, 1869, 1113, 539, 2184, 2870, 768, 2581, 464, 1856, 736, 1574, 681, 937, 2096, 1719, 3076, 1978, 2858, 2671, 1352, 264, 2884, 1750, 1309, 2304, 915, 1596, 830, 991, 1303, 2805, 1791, 2833, 649, 2588, 1257, 2454, 1920, 1192, 673, 2877, 1339, 2614, 442, 1483, 1494, 2255, 2748, 2172, 2902, 1377, 1157, 2179, 1213, 2188, 331, 664, 2765, 2056, 2394, 731, 3025, 2066, 772, 426, 1086, 2200, 2778, 2144, 1555, 2941, 2235};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for NTT
 * 
 */
TEST_F(NTTTest, NTTTEST1) {
  Polynomial<int> result = ntt_.NTT_(test_polynomial2);
  std::vector<int> expected_values = {2456, 470, 2557, 2506, 1018, 3122, 397, 2416, 858, 2701, 2109, 3231, 607, 2298, 
  2060, 1689, 1027, 258, 2167, 73, 1624, 616, 2593, 2689, 573, 439, 2173, 1619, 2181, 1471, 874, 376, 3181, 2348, 1673, 
  981, 1567, 3280, 2500, 274, 2025, 1576, 2532, 282, 23, 3107, 372, 1219, 3100, 3294, 1006, 748, 2059, 1561, 1520, 1615, 
  1849, 3027, 731, 1415, 88, 371, 1327, 2035, 1786, 1938, 195, 1760, 1396, 1363, 154, 2651, 1291, 1399, 1394, 2402, 2062, 
  1454, 2240, 428, 947, 685, 2830, 807, 3216, 1458, 2065, 48, 2104, 428, 600, 185, 1599, 196, 896, 2429, 27, 117, 1434, 
  345, 718, 1340, 1483, 9, 1559, 1389, 448, 2792, 3016, 2172, 1403, 792, 1377, 1124, 3038, 2452, 135, 2144, 499, 253, 1318, 
  913, 1432, 1988, 230, 1180, 751, 78};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for NTT
 * 
 */
TEST_F(NTTTest, NTTTEST3) {
  Polynomial<int> result = ntt_.NTT_(test_polynomial3);
  std::vector<int> expected_values = {765, 1130, 2610, 2855, 439, 3253, 2149, 1366, 618, 3261, 2892, 76, 139, 2074, 1118, 
  1287, 1977, 2511, 2021, 328, 686, 2071, 2461, 601, 1877, 1744, 877, 2648, 1146, 1490, 560, 2219, 3023, 666, 2852, 713, 
  2370, 339, 3019, 488, 3194, 521, 2097, 520, 2616, 2631, 3159, 63, 2212, 2000, 519, 2596, 1297, 3192, 303, 1024, 1663, 
  3152, 393, 2019, 2163, 2063, 1128, 3143, 1102, 1240, 629, 387, 1293, 1508, 1370, 1165, 586, 2550, 156, 3046, 2664, 3182, 
  3317, 2834, 2304, 1001, 2103, 1193, 526, 1629, 2956, 749, 1805, 868, 2629, 1964, 2018, 978, 1467, 2243, 2122, 507, 3125, 
  1756, 3244, 613, 746, 1763, 2228, 262, 1831, 1576, 230, 2585, 1839, 897, 3110, 1212, 1912, 2574, 1447, 2989, 2679, 625, 
  697, 1624, 2688, 1433, 1140, 2693, 2179, 466};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for INTT
 * 
 */
TEST_F(NTTTest, INTTTEST0) {
  Polynomial<int> result = ntt_.INTT_(test_intt_polynomial1);
  std::vector<int> expected_values = {2274, 1956, 1086, 584, 119, 3226, 861, 2173, 1907, 3226, 2746, 3287, 2086, 3084, 3218, 
  402, 670, 2131, 2434, 3292, 620, 2234, 2331, 3007, 881, 695, 3140, 1055, 148, 3321, 1367, 108, 3100, 2037, 1667, 1806, 2067,
  611, 468, 2925, 1048, 1536, 1865, 2841, 874, 726, 2842, 2509, 1311, 2988, 1844, 856, 819, 1045, 1337, 3168, 736, 1766, 1818,
  766, 3270, 315, 46, 590, 1615, 1959, 1021, 1303, 1188, 1374, 2963, 2939, 1751, 552, 545, 1811, 2883, 757, 3130, 557, 1353, 
  1290, 1071, 945, 3279, 724, 71, 342, 1127, 1114, 508, 2972, 2446, 2824, 2737, 791, 1895, 1599, 457, 2345, 2030, 1919, 1081,
  426, 3042, 521, 2551, 1202, 1309, 1344, 3282, 2983, 753, 1409, 523, 2630, 1705, 3189, 2123, 2486, 37, 1428, 1574, 234, 314,
  3060, 3013, 1678};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for INTT
 * 
 */
TEST_F(NTTTest, INTTTEST1) {
  Polynomial<int> result = ntt_.INTT_(test_intt_polynomial2);
  std::vector<int> expected_values = {2530, 1387, 2041, 2485, 890, 1451, 2307, 1808, 1642, 3017, 1349, 1579, 2907, 1938, 1737,
  2926, 3054, 586, 1235, 1904, 888, 2622, 863, 118, 1457, 1600, 2840, 146, 2136, 3009, 663, 514, 3058, 2961, 3259, 69, 3306, 632,
  1772, 1897, 189, 1914, 2025, 2557, 1789, 2443, 3125, 1126, 1784, 1908, 3227, 2763, 697, 2043, 2449, 1774, 1674, 2644, 237, 1643,
  2123, 148, 2382, 3279, 3153, 916, 2811, 759, 2370, 2691, 474, 677, 1356, 1011, 471, 371, 99, 162, 3164, 258, 2042, 788, 3278, 2244,
  1342, 2693, 3141, 3324, 2960, 1299, 2325, 2313, 1891, 1, 1244, 2248, 878, 116, 1235, 177, 775, 363, 2974, 1283, 2479, 2070, 3318, 66,
  332, 2811, 2248, 825, 820, 1133, 2103, 408, 597, 589, 1566, 2491, 1937, 1788, 784, 1536, 1635, 413, 1191, 1623};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for INTT
 * 
 */
TEST_F(NTTTest, INTTTEST3) {
  Polynomial<int> result = ntt_.INTT_(test_intt_polynomial3);
  std::vector<int> expected_values = {2557, 2660, 338, 853, 2476, 767, 3235, 2787, 2914, 2825, 1555, 2001, 1272, 2927, 3115, 721, 2155, 
  1483, 1368, 2059, 442, 2114, 1891, 1341, 2149, 2413, 670, 442, 2023, 813, 2044, 2452, 200, 3229, 313, 624, 2680, 1540, 1924, 1109, 465, 
  2032, 2502, 1737, 2489, 700, 2016, 996, 1718, 96, 2184, 3146, 523, 3070, 49, 3088, 2215, 2682, 616, 1890, 3223, 2896, 2904, 1142, 214, 706, 
  562, 700, 569, 2063, 2843, 819, 1921, 2505, 1045, 2972, 2913, 744, 1789, 2870, 106, 1567, 3190, 517, 2913, 281, 1840, 1058, 1752, 2237, 626, 
  3290, 995, 126, 921, 947, 2010, 109, 2145, 2876, 2730, 687, 2082, 1428, 1349, 1172, 3136, 71, 1380, 470, 2798, 2567, 1345, 979, 479, 332, 55, 
  2572, 1952, 843, 2967, 1035, 270, 1147, 2226, 433, 756, 879};
  Polynomial<int> expected_polynomial = Polynomial<int>(128);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for Kyber NTT
 * 
 */
TEST_F(NTTTest, KYBERNTTTEST0) {
  Polynomial<int> result = ntt2_.NTT_Kyber(test_kyber_polynomial1, true);
  std::vector<int> expected_values = {2199, 2016, 1542, 561, 52, 791, 2064, 1498, 3191, 1758, 2265, 1988, 1977, 1626, 1958, 637, 1410, 2234, 796, 
  1762, 2540, 1971, 698, 1680, 2286, 145, 925, 1070, 1450, 2538, 843, 458, 2190, 1040, 2397, 3124, 2810, 1917, 831, 3246, 2110, 2986, 2868, 2642, 
  1239, 352, 2145, 3183, 1878, 2751, 2479, 3079, 3033, 2197, 2673, 659, 1929, 63, 856, 1314, 1825, 779, 1215, 1286, 2299, 2548, 2555, 456, 1189, 
  1076, 1946, 1632, 454, 2934, 484, 3197, 459, 1595, 1648, 2024, 1268, 2195, 2794, 70, 1581, 2911, 3298, 944, 2200, 1017, 2285, 1997, 2462, 1048, 
  3061, 2900, 1228, 2032, 1565, 510, 1243, 3240, 2005, 2217, 1861, 2084, 41, 1504, 1602, 2949, 1491, 2327, 321, 593, 416, 2987, 477, 556, 2014, 
  2634, 2886, 163, 1263, 3109, 3047, 3004, 3133, 2117, 3020, 2205, 1884, 739, 561, 1937, 1392, 1841, 1627, 3061, 265, 1637, 1902, 2327, 2331, 
  1559, 316, 2269, 1931, 2590, 1879, 3156, 2177, 236, 882, 1231, 2689, 2259, 2161, 1966, 2473, 1365, 1900, 2774, 468, 1508, 2474, 2077, 194, 
  2428, 2146, 2133, 68, 352, 2033, 629, 2176, 1609, 1773, 1441, 2168, 679, 3155, 169, 3028, 16, 174, 689, 3307, 2509, 807, 841, 2599, 2320, 
  197, 701, 3238, 3035, 839, 1288, 3309, 3042, 1969, 1413, 1082, 838, 2020, 16, 525, 3044, 497, 2647, 523, 1322, 806, 1736, 2657, 454, 3036, 205, 
  398, 343, 29, 1056, 2228, 878, 1080, 1742, 93, 479, 217, 1129, 2415, 3159, 1081, 1633, 925, 825, 3126, 637, 2658, 937, 425, 2050, 2072, 930, 2987,
  3146, 2246, 44, 232, 2528, 1120, 56, 1817, 800, 1456, 1013};
  Polynomial<int> expected_polynomial = Polynomial<int>(256);
  expected_polynomial.SetCoefficients(expected_values);
  EXPECT_EQ(result, expected_polynomial);
}

/**
 * @brief Test for Kyber NTT
 * 
 */
TEST_F(NTTTest, KYBERPARSENTT) {
  Polynomial<int> result = ntt2_.ParsePolynomial_(test_bytes1);
  std::vector<int> expected_values = {2269, 2388, 892, 693, 1383, 534, 380, 2520, 2723, 948, 1659, 861, 2211, 1571, 3269, 966, 140, 1029, 288, 2858,
  1871, 147, 3238, 1671, 1874, 2692, 2837, 779, 885, 90, 2324, 626, 3270, 1457, 880, 449, 2163, 1865, 1077, 2368, 2665, 643, 1623, 1286, 148, 2270,
  2085, 2824, 468, 1645, 2125, 2256, 1617, 3149, 2460, 2473, 368, 1090, 55, 3322, 655, 184, 2558, 2536, 935, 2540, 75, 1342, 1294, 161, 1843, 1946,
  3042, 101, 2252, 2937, 1526, 1873, 3266, 730, 905, 2478, 473, 825, 956, 216, 1021, 1021, 1567, 3324, 108, 1240, 596, 1207, 106, 1249, 2273, 252,
  378, 608, 1577, 1733, 648, 1776, 50, 2708, 224, 1808, 2076, 2938, 436, 2363, 1467, 1496, 3082, 2232, 2007, 2730, 2515, 2472, 248, 7, 813, 1458,
  2713, 2470, 1884, 372, 1243, 815, 2505, 207, 3046, 2038, 3216, 296, 1836, 3145, 74, 3313, 347, 2019, 16, 618, 2028, 3210, 1901, 2820, 2445, 1037,
  2894, 166, 1735, 674, 954, 3194, 32, 552, 2789, 2202, 1783, 1294, 1845, 1006, 3205, 1616, 1073, 814, 1845, 418, 397, 1623, 1830, 1502, 829, 1237,
  874, 2712, 1423, 1082, 3027, 1884, 1182, 1770, 79, 1686, 712, 2103, 3043, 1991, 766, 62, 2629, 600, 2435, 1228, 1096, 3082, 1864, 2411, 900, 855,
  205, 2782, 3053, 174, 1593, 1454, 100, 2615, 2168, 910, 2308, 1803, 233, 971, 1126, 2489, 1089, 753, 1558, 646, 71, 2629, 588, 2840, 54, 643, 2186,
  1041, 3008, 1907, 2385, 213, 317, 2326, 406, 1428, 848, 2259, 447, 1263, 248, 680, 873, 697, 866, 2018, 3247, 1703, 1580, 2614, 2145, 802, 2621, 1825};
  EXPECT_EQ(result.GetCoefficients(), expected_values);
}

/**
 * @brief Test for Kyber NTT
 * 
 */
TEST_F(NTTTest, KYBERGENERATEMATRIX) {
  Bytes rho = Bytes(std::vector<int>{136, 8, 68, 125, 53, 221, 7, 224, 168, 80, 36, 143, 116, 153, 22, 75, 51, 159, 85, 49, 21, 36, 114, 3, 145, 50, 232, 44, 6, 230, 196, 121});
  Matrix<Polynomial<int>> result = ntt2_.GenerateMatrix_(2, rho, true);
  Matrix<Polynomial<int>> expected_matrix = Matrix<Polynomial<int>>(2, 2, 256);
  expected_matrix(0, 0).SetCoefficients({1733, 2879, 111, 399, 773, 1732, 1059, 1199, 94, 1238, 2016, 1808, 234, 1285, 1808, 703, 1363, 2686, 2357,
  100, 2708, 1783, 1144, 776, 628, 677, 3191, 2564, 685, 2522, 2989, 578, 423, 511, 1055, 348, 3162, 375, 111, 3152, 482, 1945, 2391, 2525, 635, 1229, 2508, 3316, 285, 2990, 2821,
  2539, 594, 1071, 2320, 634, 2056, 198, 2654, 2216, 1552, 2030, 403, 3326, 1564, 739, 1976, 2313, 1055, 299, 2370, 2132, 630, 696, 1534, 3292, 2146, 3108, 1488, 2289, 2674, 3169,
  2873, 1408, 2946, 290, 2066, 857, 2003, 3220, 2353, 1401, 419, 2951, 2034, 33, 1731, 2029, 2741, 2064, 360, 2432, 2016, 845, 3242, 2269, 1303, 3203, 418, 3231, 2391, 1070, 604, 2799,
  1365, 1488, 1778, 3114, 820, 2720, 2593, 1262, 398, 2974, 372, 253, 1252, 1763, 1729, 2607, 1287, 2235, 612, 1104, 3087, 1866, 2746, 1690, 2540, 152, 1076, 728, 2202, 3121, 2862, 1927,
  1318, 888, 2599, 346, 1239, 1298, 1641, 2968, 120, 66, 1986, 2125, 1130, 3026, 606, 2597, 442, 1556, 1859, 793, 148, 1080, 2173, 293, 1972, 2868, 3156, 994, 3292, 3171, 2897, 988, 2811,
  1285, 2412, 128, 2578, 1218, 2193, 863, 701, 2574, 1029, 3273, 3078, 761, 915, 496, 1117, 305, 2704, 1511, 453, 1325, 755, 603, 135, 3174, 2156, 2373, 3216, 2556, 786, 982, 248, 677, 694,
  600, 3179, 438, 1663, 861, 2725, 2096, 1590, 1278, 1257, 2660, 2606, 1991, 2778, 2060, 1747, 801, 364, 1571, 2213, 2353, 1143, 2005, 1713, 645, 2919, 1905, 1611, 2831, 2742, 1785, 960, 444,
  701, 2183, 283, 3020, 2946, 2123, 833, 1294, 553, 537});
  expected_matrix(0, 1).SetCoefficients({3063, 2844, 1408, 1262, 1246, 2954, 239, 713, 2481, 2178, 1500, 1147, 1224, 3165, 88, 1098, 784, 1393, 1979, 2694, 233, 1361, 1011, 832, 2761, 1573, 2599,
  3213, 577, 3302, 2670, 2189, 565, 80, 659, 3278, 2475, 2612, 753, 1118, 2538, 1214, 2779, 3213, 1993, 2419, 1856, 2225, 3213, 2824, 86, 2347, 815, 147, 1337, 453, 917, 1361, 2050, 2778, 911, 27,
  478, 761, 382, 1359, 2768, 2394, 3288, 1983, 1552, 313, 1608, 2174, 616, 2903, 2873, 1449, 3263, 3119, 3287, 1495, 1046, 1499, 2990, 386, 1015, 1859, 1134, 27, 1749, 2257, 1200, 2284, 635, 839, 1994,
  2811, 2914, 2124, 2153, 2977, 337, 544, 822, 517, 351, 2595, 76, 141, 644, 3242, 711, 1560, 510, 3212, 3120, 1527, 754, 1451, 950, 1115, 2804, 2992, 1220, 2660, 465, 960, 1369, 2754, 1031, 2115, 2133,
  852, 2071, 1150, 413, 879, 3291, 2442, 1196, 1755, 1694, 2909, 3277, 956, 3037, 2037, 2357, 2220, 951, 1972, 2597, 59, 2041, 1083, 2177, 628, 681, 436, 3300, 767, 360, 1601, 2940, 1033, 3269, 2107, 290,
  2747, 2376, 912, 1316, 471, 2345, 1202, 1596, 1570, 2791, 3138, 2479, 614, 614, 1274, 2102, 1686, 2691, 52, 1165, 832, 798, 3297, 2916, 725, 2299, 51, 2297, 950, 1444, 880, 2861, 2361, 3269, 1532, 1093,
  2423, 777, 2264, 2883, 2458, 717, 3000, 1077, 3115, 2363, 1724, 1249, 1567, 381, 748, 2868, 216, 957, 1231, 3111, 2186, 1570, 658, 2856, 537, 2512, 1534, 1687, 2118, 3269, 696, 2455, 1922, 2264, 526, 1457,
  1792, 2858, 106, 2841, 686, 1245, 478, 1259, 1792, 1287, 208, 1468, 986, 2584, 366});
  expected_matrix(1, 0).SetCoefficients({3108, 965, 796, 421, 497, 1721, 2278, 956, 3002, 2244, 2940, 1682, 1867, 2498, 1223, 3326, 1090, 2981, 2752, 2441, 236, 2917, 2979, 2589, 2218, 96, 563, 2976, 2868,
  2494, 793, 2427, 1077, 2650, 86, 866, 2437, 1781, 2127, 53, 2354, 2172, 2005, 2367, 3002, 678, 2445, 3210, 102, 2016, 3100, 1256, 1053, 2705, 1004, 903, 1271, 2905, 2023, 2243, 216, 260, 1222, 2857, 1043,
  1279, 422, 2099, 1862, 646, 951, 1786, 3304, 449, 485, 3242, 2360, 1668, 2998, 2302, 587, 1276, 2343, 1841, 1510, 834, 1815, 2794, 1689, 123, 1956, 2360, 513, 1006, 1680, 1332, 613, 75, 2330, 934, 1388, 1092,
  239, 2256, 957, 516, 676, 1789, 2240, 552, 2103, 2610, 168, 749, 876, 3010, 2594, 2739, 1346, 2693, 975, 1469, 1947, 1623, 39, 949, 2498, 15, 2986, 1805, 3220, 3285, 532, 901, 3134, 828, 3292, 781, 1772, 204,
  1912, 875, 181, 52, 3107, 1614, 223, 441, 218, 144, 1867, 2935, 701, 1779, 2129, 281, 604, 1907, 397, 230, 938, 517, 969, 2104, 2477, 1810, 791, 2856, 3180, 884, 2087, 1285, 138, 2006, 3026, 2601, 2714, 3052,
  2645, 201, 909, 2004, 973, 862, 632, 2616, 835, 1674, 2034, 928, 155, 2248, 2080, 1126, 2967, 2505, 1401, 305, 2048, 1715, 2320, 467, 111, 1815, 381, 187, 2397, 2670, 2401, 1265, 419, 2922, 565, 4, 1322, 758,
  226, 2196, 2365, 2022, 1306, 1782, 2101, 692, 1752, 2804, 2552, 2494, 1261, 1679, 3263, 2895, 459, 2659, 124, 435, 1916, 3198, 2521, 449, 1423, 2990, 2747, 2813, 1952, 138, 3152, 1471, 1946, 1648, 1391, 1276,
  2244, 810, 2566, 1140});
  expected_matrix(1, 1).SetCoefficients({1622, 3227, 2943, 572, 155, 1957, 1028, 1985, 1526, 2132, 2433, 1837, 1272, 2732, 2331, 3231, 3170, 1576, 1833, 1740, 760, 2560, 455, 3221, 2859, 950, 2078, 1043, 1316, 540,
  116, 603, 1989, 2200, 1898, 862, 1964, 1672, 1064, 69, 202, 301, 1780, 2038, 3155, 1246, 2049, 3217, 771, 2812, 140, 3197, 334, 1101, 929, 2823, 593, 406, 867, 313, 1820, 934, 2093, 420, 1905, 2265, 469, 1104, 2631,
  1373, 2691, 1738, 1683, 1851, 592, 2400, 1704, 381, 2434, 1987, 1781, 202, 2124, 2914, 1637, 3252, 691, 2335, 2566, 560, 748, 1534, 754, 1569, 574, 2820, 1931, 1769, 1441, 2333, 2435, 2681, 3260, 1750, 651, 918, 2177,
  1428, 2704, 2306, 1119, 1661, 1053, 861, 1225, 792, 394, 1378, 2234, 1657, 643, 2555, 837, 1598, 3250, 2745, 1905, 2563, 3009, 890, 2068, 2749, 1538, 410, 10, 1595, 1377, 91, 1767, 212, 2944, 1071, 439, 2068, 2515, 2766,
  1032, 2044, 2303, 1742, 441, 828, 1431, 1167, 3190, 1124, 2835, 1350, 2744, 1972, 1370, 2902, 3189, 3079, 1928, 1751, 124, 2055, 2638, 32, 1192, 2693, 784, 82, 3311, 146, 77, 2764, 1192, 1409, 1847, 978, 658, 3227, 30, 2939,
  1037, 1685, 625, 2580, 1608, 146, 1975, 1468, 1749, 3309, 605, 2844, 194, 2966, 1988, 463, 3018, 939, 2345, 1145, 334, 1893, 2892, 909, 3295, 446, 490, 414, 513, 100, 2791, 1304, 1031, 948, 477, 2359, 3069, 3269, 1224, 3005,
  2250, 1244, 91, 1380, 808, 2654, 2323, 1537, 943, 2969, 608, 2131, 185, 375, 244, 3130, 822, 1049, 1518, 13, 2568, 1819, 691, 2095, 2362, 1586, 647, 2156, 3105, 940});
  EXPECT_EQ(result, expected_matrix);
}